<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    This is a sample context two show three different ways to integrate with Spring.
    There are three beans that act as business services: FooService1, FooService2 and FooService3
    Each one is injected with a mapper coded in a different way 
    UserMapper1 extends SqlSessionDaoSupport
    UserMapper2 uses directly MyBatis API to create, use and close SqlSession
    UserMapper3 has no implementation. The implementation is build on the fly by MyBatis.

    version: $Id$
-->
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
     default-autowire="byName">

    <context:annotation-config />

    <tx:annotation-driven />

    <jdbc:embedded-database id="dataSource">
        <jdbc:script location="classpath:sample/db.sql" />
    </jdbc:embedded-database>

    <bean id="fooService1" class="sample.FooServiceImpl">
        <property name="userMapper" ref="userMapper1" />
    </bean>

    <bean id="fooService2" class="sample.FooServiceImpl">
        <property name="userMapper" ref="userMapper2" />
    </bean>

    <bean id="fooService3" class="sample.FooServiceImpl">
        <property name="userMapper" ref="userMapper3" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

	<!-- beware that mapper-config.xml is needed is you donÂ´t use injected mappers -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- option1 injecting mappers (recommended) -->
    <bean id="userMapper1" class="org.mybatis.spring.MapperFactoryBean">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
        <property name="mapperInterface" value="sample.UserMapper" />
    </bean>

    <!-- option2 extending SqlSessionDaoSupport -->
    <bean id="userMapper2" class="sample.UserMapperTemplateImpl">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <!-- option3 using MyBatis API-->
    <bean id="userMapper3" class="sample.UserMapperSqlSessionImpl">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

</beans>
