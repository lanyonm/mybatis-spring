<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->
<chapter id="templates_support">
  <title>Using an SqlSession</title>
  
  <para>
    In MyBatis you use the <literal>SqlSessionFactory</literal> to create an
    <literal>SqlSession</literal>. Once you have a session, you use it to
    execute your mapped statements, commit or rollback connections and
    finally, when it is no longer needed, you close the session. With
    MyBatis-Spring you don't need to use <literal>SqlSessionFactory</literal>
    directly because your beans can be injected with a thread safe
    <literal>SqlSession</literal> that automatically commits, rollbacks and
    closes the session based on Spring's transaction configuration.
  </para>  

  <para>
    Note that it is usually not necessary to use a <literal>SqlSession</literal> directly. 
    In most cases a <literal>MapperFactoryBean</literal> that will inject mappers
    into your beans, will be all that is needed. The 
    <link linkend="mappers.mapperfactorybean"><literal>MapperFactoryBean</literal></link> 
    will be explained in detail in the next chapter. 
  </para>  

  <section id="templates_support.template">
    <title>SqlSessionTemplate</title>

    <para>
      <literal>SqlSessionTemplate</literal> is the heart of MyBatis-Spring.
      This class is responsible for managing MyBatis <literal>SqlSessions</literal>, 
      calling MyBatis SQL methods and translating exceptions.
      <literal>SqlSessionTemplate</literal> is thread safe and can be shared
      by multiple DAOs.
    </para>
    
    <para>
      When calling SQL methods, including any method from Mappers returned by
      <literal>getMapper()</literal>, <literal>SqlSessionTemplate</literal>
      will ensure that the <literal>SqlSession</literal> used is the one
      associated with the current Spring transaction. In addition, it manages
      the session life-cycle, including closing, committing or rolling back the
      session as necessary.
    </para> 
      
    <para>
      <literal>SqlSessionTemplate</literal> implements <literal>SqlSession</literal> 
      and is meant to be a drop-in replacement for any existing use of <literal>SqlSession</literal>
      in your code. <literal>SqlSessionTemplate</literal> should <emphasis>always</emphasis>
      be used instead of default MyBatis implementation <literal>DefaultSqlSession</literal> 
      because the template can participate in Spring transactions and is thread safe for use by
      multiple injected mapper classes. Switching between the two classes in the
      same application can cause data integrity issues.
    </para>

    <para>
      A <literal>SqlSessionTemplate</literal> can be constructed 
      using an <literal>SqlSessionFactory</literal> as a constructor argument.

      <programlisting language="xml"><![CDATA[<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
  <constructor-arg index="0" ref="sqlSessionFactory" />
</bean>]]></programlisting>	      
    </para>

    <para>
      This bean can now be injected directly in your DAO beans. You need a
      <literal>SqlSession</literal> property in your bean like the following

      <programlisting language="java"><![CDATA[public class UserDaoImpl implements UserDao {
    
  private SqlSession sqlSession;

  public void setSqlSession(SqlSession sqlSession) {
    this.sqlSession = sqlSession;
  }

  public User getUser(String userId) {
    return (User) sqlSession.selectOne("org.mybatis.spring.sample.mapper.UserMapper.getUser", userId);
  }
}]]></programlisting>
      
      And inject the <literal>SqlSessionTemplate</literal> as follows
      
      <programlisting language="java"><![CDATA[<bean id="userDao" class="org.mybatis.spring.sample.dao.UserDaoImpl">
  <property name="sqlSession" ref="sqlSession" />
</bean>]]></programlisting>	      
    </para>

    <para>
      <literal>SqlSessionTemplate</literal> has also a constructor that takes
      an <literal>ExecutorType</literal> as an argument. This allows you to
      construct, for example, a batch <literal>SqlSession</literal> by using
	  the following in Spring's configuration xml:  
      <programlisting language="xml"><![CDATA[<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
  <constructor-arg index="0" ref="sqlSessionFactory" />
  <constructor-arg index="1" value="BATCH" />
</bean>]]></programlisting>
	  
      Now all your statements will be batched so the following could be coded
      in a DAO
      <programlisting language="java"><![CDATA[public void insertUsers(User[] users) {
   for (User user : users) {
   	sqlSession.insert("org.mybatis.spring.sample.mapper.UserMapper.insertUser", user);
   }
 }]]></programlisting> 
    </para>

    <para>
      Note that this configuration style only needs to be used if the desired
      execution method differs from the default set for the
      <literal>SqlSessionFactory</literal>. 
    </para>

    <para>
      The caveat to this form is that
      there <emphasis>cannot</emphasis> be an existing transaction running with
      a different ExecutorType when this method is called. Either ensure that
      calls to <literal>SqlSessionTemplate</literal>s with different executor
      types run in a separate transaction (e.g. with PROPAGATION_REQUIRES_NEW) or
      completely outside of a transaction.
    </para>
  </section>

  <section id="templates_support.daosupport">
    <title>SqlSessionDaoSupport</title>

    <para>
      <literal>SqlSessionDaoSupport</literal> is an abstract support class that
      provides you with a <literal>SqlSession</literal>. Calling 
      <literal>getSqlSession()</literal> you will get a <literal>SqlSessionTemplate</literal>
      which can then be used to execute SQL methods, like the following:

      <programlisting language="java"><![CDATA[public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao {
  public User getUser(String userId) {
    return (User) getSqlSession()
        .selectOne("org.mybatis.spring.sample.mapper.UserMapper.getUser", userId);
  }
}]]></programlisting>

      Usually <literal>MapperFactoryBean</literal> is preferred to this class,
      since it requires no extra code. But, this class is useful if you need
      to do other non-MyBatis work in your DAO and concrete classes are
      required.
    </para>

    <para>
      <literal>SqlSessionDaoSupport</literal> requires either an
      <literal>sqlSessionFactory</literal> or an <literal>sqlSessionTemplate</literal> 
      property to be set. These can be set explicitly or autowired by Spring. 
      If both properties are set, the <literal>sqlSessionFactory</literal> is ignored.
    </para>

    <para>
      Assuming a class <literal>UserDaoImpl</literal> that subclasses
      <literal>SqlSessionDaoSupport</literal>, it can be configured in Spring
      like the following:

      <programlisting language="xml"><![CDATA[<bean id="userMapper" class="org.mybatis.spring.sample.mapper.UserDaoImpl">
  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>]]></programlisting>
    </para>
  </section>
</chapter>
