<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->
<chapter id="bootstrap">
  <title>Bootstrap</title>

  <section id="bootstrap.intro">
    <title>Introduction</title>
      <para>
        Mybatis-spring integration helps you to integrate your code seamlessly with Spring. Spring will load and
        create necessary MyBatis classes for you, will handle transactions, translate exceptions  
        and will also inject mappers into your service beans.
      </para>
  </section>
    
  <section id="bootstrap.installation">
    <title>Installation</title>
      <para>
        To run mybatis-spring module you just need to include the
        <literal>mybatis-spring-<?eval ${project.version}?>.jar</literal> 
        file and its dependencies in the classpath.
      </para>
      <para>
        If you are using Maven just add the following dependency
        to your pom.xml :
        <programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>]]><?eval ${project.version}?><![CDATA[</version>
</dependency>]]>
      </programlisting>
    </para>
  </section>
    
  <section id="bootstrap.setup">
    <title>Setting up a SqlSessionFactory</title>
      <para>
        As you already know, to use MyBatis you need to build a <literal>SqlSessionFactory</literal> from XML files.
        Mybatis-spring will build a SqlSessionFactory for you during Spring startup.

        The XML snippet below shows the configuration needed to build a <literal>SqlSessionFactoryBean</literal>:

        <programlisting language="xml"><![CDATA[
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
</bean>]]>
        </programlisting>
		As you see to set a <literal>SqlSessionFactory</literal> you will just need a datasource. 
		You can also provide a <literal>mybatis-config.xml</literal> by seting the <literal>configLocation</literal> property:
        <programlisting language="xml"><![CDATA[
    <property name="configLocation" value="classpath:sample/mybatis-config.xml" />]]>
        </programlisting>
		
		When using mybatis-spring you should not include the <literal>transactionManager</literal> 
		and <literal>dataSource</literal> sections. Mapper list is also not needed
        if you are using injected mappers.
    </para>
  </section>
</chapter>
