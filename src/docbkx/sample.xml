<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->

<chapter id="sample">
	<title>Sample Code</title>

	<para>
		You can check out sample code from the MyBatis repository on Google Code.
		<itemizedlist>
			<listitem>
				<para>
					<ulink
						url="http://mybatis.googlecode.com/svn/sub-projects/mybatis-spring/trunk/src/test/java/org/mybatis/spring/sample/">Java code</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink
						url="http://mybatis.googlecode.com/svn/sub-projects/mybatis-spring/trunk/src/test/resources/org/mybatis/spring/sample/">Config files</ulink>
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		Any of the samples can be run with JUnit 4.
  </para>
	<para>
		The sample code shows a typical design where a transactional service gets
		domain objects from a data access layer.
  </para>
	<para>
		<literal>FooService.java</literal> acts as the service:
		<programlisting language="java"><![CDATA[@Transactional
public class FooService {

    private UserDao userDao;

    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }

    public User doSomeBusinessStuff(String userId) {
        return this.userDao.getUser(userId);
    }
}
]]></programlisting>
		It is a transactional bean, so a transaction is started when any of its methods is called 
		and committed when the method ends without throwing an unchecked exception.
		Notice that transactional behaviour is configured with the <literal>@Transactional</literal>
		attribute. This is not required; any other way provided by Spring can be used to demarcate 
		your transactions.
	</para>
	<para>
		This service calls a data access layer built with MyBatis. This layer
		consists on a DAO composed by an interface <literal>UserDao.java</literal>
		that will be used both with a dynamic proxy built by MyBatis at runtime or 
		with a java class <literal>UserMapperImpl.java</literal>.
		This DAO is injected into the service by Spring.
	</para>
	<para>
		The database access layer has been implemented using some of the
		different techniques explained in this manual.
		<table>
			<caption>Sample test classes</caption>
			<thead>
				<tr>
					<th>Sample test</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>
						<literal>SampleMapperTest</literal>
					</td>
					<td>
						Shows you the recommended configuration
						based on a <literal>MapperFactoryBean</literal> that will
						dynamically build an implementation for <literal>UserDao</literal>
					</td>
				</tr>
				<tr>
					<td>
						<literal>SampleScannerTest</literal>
					</td>
					<td>Shows how to use the <literal>MapperScannerConfigurer</literal>
                    </td>
				</tr>
				<tr>
					<td>
						<literal>SampleSqlSessionTest</literal>
					</td>
					<td>
						Shows how to hand code a DAO using a Spring managed
						<literal>SqlSession</literal> and providing your own
						implementation <literal>UserDaoImpl.java</literal>.
					</td>
				</tr>
				<tr>
					<td>
						<literal>SampleBatchTest</literal>
					</td>
					<td>
						Shows how to use a batch <literal>SqlSession</literal>
					</td>
				</tr>
			</tbody>
		</table>
		Please take a look at the different <literal>applicationContext.xml</literal>
		files to see MyBatis-Spring in action.
	</para>
</chapter>
