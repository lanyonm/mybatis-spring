<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<chapter id="sample">
  <title>Sample Code</title>

  <para>
    You can check out the sample code from the MyBatis repository on Google Code.

    <itemizedlist>
      <listitem>
        <para>
          <ulink url="http://code.google.com/p/mybatis/source/browse/#svn/sub-projects/mybatis-spring/trunk/src/test/java/sample">Java code</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="http://code.google.com/p/mybatis/source/browse/#svn/sub-projects/mybatis-spring/trunk/src/test/resources/sample">Config files</ulink>
        </para>
      </listitem>
    </itemizedlist>
  </para>
  <para>
    To run the sample just run MyBatisSampleTest.java with JUnit 4.
  </para>
  <para>
    The sample code has one service interface, <literal>FooService</literal>,
    that acts as a transactional service. It starts and ends a transaction
    when any of its methods is called. 

    <programlisting language="java"><![CDATA[@Transactional
public interface FooService {
  User doSomeBusinessStuff(String userId);
}]]></programlisting>

    Notice that transactional behaviour is configured with the
    <literal>@Transactional</literal> attribute. This is not required; any
    other way provided by Spring can be used to demarcate your transactions. 
  </para>

  <para>
    <literal>FooServiceImpl.java</literal> is the FooService implementation
    and it just uses DAOs/mappers that Spring has injected during startup.
    You will notice that your code does not need to call any Spring or
    MyBatis methods.

    <programlisting language="java"><![CDATA[public class FooServiceImpl implements FooService {
  private UserMapper userMapper;

  public void setUserMapper(UserMapper userMapper) {
    this.userMapper = userMapper;
  }

  public User doSomeBusinessStuff(String userId) {
    return this.userMapper.getUser(userId);
  }
}]]></programlisting>
  </para>

  <para>
    The database access layer has been implemented using the four different
    techniques explanied in this manual: with
    <literal>MapperFactoryBean</literal> (both directly and through
    <literal>MapperScanner</literal>), with
    <literal>SqlSessionDaoSupport</literal> and with a DAO implemented using
    the base MyBatis API. Please see <literal>context.xml</literal> for the
    full Spring configuration.
  </para>
</chapter>
