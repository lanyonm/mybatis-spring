<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->
<chapter id="using_api">
  <title>Using the MyBatis API</title>

  <para>
    With MyBatis-Spring, you can continue to directly use the MyBatis API.
    Simply create an <literal>SqlSessionFactory</literal> in Spring using
    <literal>SqlSessionFactoryBean</literal> and use the factory in your code.
    In this case you will not have any MyBatis-Spring dependencies in your
    code; simply use the injected <literal>SqlSessionFactory</literal> in your
    DAOs:

    <programlisting language="java"><![CDATA[public class UserMapperSqlSessionImpl implements UserMapper {
  // SqlSessionFactory would normally be set by SqlSessionDaoSupport
  private SqlSessionFactory sqlSessionFactory;

  public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {
    this.sqlSessionFactory = sqlSessionFactory;
  }

  public User getUser(String userId) {
    // note standard MyBatis API usage - opening and closing the session manually
    SqlSession session = sqlSessionFactory.openSession();

    try {
      return (User) session.selectOne("org.mybatis.spring.sample.mapper.UserMapper.getUser", userId);
    } finally {
      session.close();
    }
  }
}]]></programlisting>
  </para>

  <para>
    Note that this usage will <emphasis>not</emphasis> participate in any
    Spring transactions. Further, if the <literal>SqlSession</literal> is using a
    <literal>DataSource</literal> that is also being used by a Spring
    transaction manager and there is currently a transaction in progress, this
    code <emphasis>will</emphasis> throw an exception. For this reason, if you
    must use this style of access, you should not use a Spring transactional
    database connection.
  </para>
</chapter>
