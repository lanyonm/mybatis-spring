<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->
<chapter id="factorybean">
  <title>SqlSessionFactoryBean</title>

  <para>
    In base MyBatis, the session factory can be built using
    <literal>SqlSessionFactoryBuilder</literal>. In MyBatis-Spring,
    <literal>SqlSessionFactoryBean</literal> is used instead.
  </para>

  <section id="factorybean.setup">
    <title>Setup</title>

    <para>
      To create the factory bean, put the following in the Spring XML
      configuration file:

      <programlisting language="xml"><![CDATA[<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
</bean>]]></programlisting>

      Note that <literal>SqlSessionFactoryBean</literal> implements Spring's
      <literal>FactoryBean</literal> interface (see section 3.8 of the Spring
      documentation). This means that the bean Spring ultimately creates is
      <emphasis>not</emphasis> the <literal>SqlSessionFactoryBean</literal> itself, but what the
      factory returns as a result of the <literal>getObject()</literal> call on
      the factory. In this case, Spring will build an
      <literal>SqlSessionFactory</literal> for you at application startup and
      store it with the name <literal>sqlSessionFactory</literal>. In Java, the
      equivalent code would be:

      <programlisting language="java"><![CDATA[SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
SqlSessionFactory sessionFactory = factoryBean.getObject();]]></programlisting>
  </para>

    <para>
      In normal MyBatis-Spring usage, you will not need to use
      <literal>SqlSessionFactoryBean</literal> or the corresponding
      <literal>SqlSessionFactory</literal> directly. Instead, the session
      factory will be injected into <literal>MapperFactoryBean</literal>s or
      other DAOs that extend <literal>SqlSessionDaoSupport</literal>.
    </para>
  </section>

  <section id="factorybean.properties">
    <title>Properties</title>

    <para>
      <literal>SqlSessionFactory</literal> has a single required property, the
      JDBC <literal>DataSource</literal>. This can be any 
      <literal>DataSource</literal> and should be configured just
      like any other Spring database connection.
    </para>

    <para id="factorybean.configlocation">
      One common property is <literal>configLocation</literal> which is used to
      specify the location of the MyBatis XML configuration file. One case
      where this is needed is if the base MyBatis configuration needs to be
      changed. Usually this will be <literal>&lt;settings&gt;</literal> or
      <literal>&lt;typeAliases&gt;</literal> sections.
    </para>

    <para>
      Note that this config file does <emphasis>not</emphasis> need to be a
      complete MyBatis config. Specifically, any environments, data sources
      and MyBatis transaction managers will be <emphasis>ignored</emphasis>.
      <literal>SqlSessionFactoryBean</literal> creates its own, custom MyBatis
      <literal>Environment</literal> with these values set as required.
    </para>

    <para>
      Another reason to require a config file is if the MyBatis mapper XML
      files are not in the same classpath location as the mapper classes. With
      this configuration, there are two options. This first is to manually
      specify the classpath of the XML files using a
      <literal>&lt;mappers&gt;</literal> section in the MyBatis config
      file. A second option is to use the <literal>mapperLocations</literal>
      property of the factory bean.
    </para>

    <para>
      The <literal>mapperLocations</literal> property takes a list of resource
      locations. This property can be used to specify the location of MyBatis
      XML mapper files. The value can contain Ant-style patterns to load all
      files in a directory or to recursively search all paths from a base
      location. For example:

     <programlisting language="xml"><![CDATA[<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="mapperLocations" value="classpath*:sample/config/mappers/**/*.xml" />
</bean>]]></programlisting>

      This will load all the MyBatis mapper XML files in the
      sample.config.mappers package and its sub-packages from the classpath.
    </para>

    <para>
      One property that may be required in an environment with container
      managed transactions is <literal>transactionFactoryClass</literal>.
      Please see the relevant section in the
      <link linkend="transactions.cmt">Transactions</link> chapter.
    </para>
  </section>
</chapter>
