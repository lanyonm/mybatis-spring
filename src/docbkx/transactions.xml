<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->
<chapter id="transactions">
  <title>Transactions</title>

  <para>
    One of the primary reasons for using MyBatis-Spring is that it allows
    MyBatis to participate in Spring transactions. Rather than create a new
    transaction manager specific to MyBatis, MyBatis-Spring leverages the
    existing <literal>DataSourceTransactionManager</literal> in Spring.
  </para>

  <para>
    Once a Spring transaction manager is configured, you can configure
    transactions in Spring as you normally would. Both
    <literal>@Transactional</literal> annotations and AOP style
    configurations are supported. A single <literal>SqlSession</literal>
    object will be created and used for the duration of the transaction. This
    session will be committed or rolled back as appropriate when then
    transaction completes.
  </para>

  <para>
    MyBatis-Spring will transparently manage transactions once they are set up.
    There is no need for additional code in your DAO classes.
  </para>

  <section  id="transactions.datasource">
    <title>Standard Configuration</title>

    <para>
      To enable Spring transaction processing, simply create a
      <literal>DataSourceTransactionManager</literal> in your Spring XML
      configuration file:

      <programlisting language="xml"><![CDATA[<bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  <property name="dataSource" ref="dataSource" />
</bean>]]></programlisting>
    </para>

    <para>
      The <literal>DataSource</literal> specified can be any JDBC 
      <literal>DataSource</literal> you would normally
      use with Spring. This includes connection pools as well as <literal>DataSource</literal>s
      obtained through JNDI lookups.
    </para>

    <para>
      Note that the <literal>DataSource</literal> specified for the transaction
      manager <emphasis>must</emphasis> be the same one that is used to create
      the <literal>SqlSessionFactoryBean</literal> or transaction management will
      not work.
    </para>
  </section>

  <section id="transactions.cmt">
    <title>Container Managed Transactions</title>

    <para>
      If you are using a JEE container and would like Spring to participate in
      container managed transactions (CMT), then Spring should be configured
      with a <literal>JtaTransactionManager</literal> or one of its container
      specific subclasses. The easiest way to do this is to use the Spring
      transaction namespace:

      <programlisting language="xml"><![CDATA[<tx:jta-transaction-manager />]]></programlisting>

      In this configuration, MyBatis will behave like any other Spring
      transactional resource configured with CMT. Spring will automatically use
      any existing container transaction and attach an <literal>SqlSession</literal> to it. If no
      transaction is started and one is needed based on the transaction
      configuration, Spring will start a new container managed transaction.
    </para>

    <para>
      Note that if you want to use CMT and do <emphasis>not</emphasis> want to
      use Spring transaction management, you <emphasis>must not</emphasis>  
      configure any Spring transaction manager and you <emphasis>must</emphasis> 
      also configure the <literal>SqlSessionFactoryBean</literal> to use the base 
      MyBatis <literal>ManagedTransactionFactory</literal>:

      <programlisting language="xml"><![CDATA[<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
  <property name="dataSource" ref="dataSource" />
  <property name="transactionFactory">
    <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
  </property>  
</bean>]]></programlisting>
    </para>
  </section>
  
  <section id="transactions.programmatic">
    <title>Programmatic Transaction Management</title>
    <para>
      MyBatis <literal>SqlSession</literal> provides you with specific methods to handle
      transactions programmatically. But when using MyBatis-Spring your beans will be 
      injected with a Spring managed <literal>SqlSession</literal> or a Spring managed mapper. 
      That means that Spring will <emphasis>always</emphasis> handle your transactions. 
    </para>
    <para>
      You cannot call <literal>SqlSession.commit()</literal>, <literal>SqlSession.rollback()</literal>  
      or <literal>SqlSession.close()</literal> over a Spring managed <literal>SqlSession</literal>.
      If you try to do so, a <literal>UnsupportedOperationException</literal> exception 
      will be thrown. Note these methods are not exposed in injected mapper classes.
    </para>
    <para>
      Regardless of your JDBC connection's autocommit setting, any execution of a 
      <literal>SqlSession</literal> data method or any call to a mapper 
      method outside a Spring transaction will be automatically committed.
    </para>
    <para>
      If you want to control your transactions programmatically please refer to chapter 10.6 of 
      the Spring reference manual. This code shows how to handle a transaction manually 
      using the <literal>PlatformTransactionManager</literal> described in section 10.6.2. 
      <programlisting language="java"><![CDATA[DefaultTransactionDefinition def = new DefaultTransactionDefinition();
def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

TransactionStatus status = txManager.getTransaction(def);
try {
  userMapper.insertUser(user);
}
catch (MyException ex) {
  txManager.rollback(status);
  throw ex;
}
txManager.commit(status);]]></programlisting>

      Notice that this code uses a mapper, but it will also work with a <literal>SqlSession</literal>.
    </para>
  </section>
</chapter>
