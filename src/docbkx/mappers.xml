<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->
<chapter id="mappers">

  <title>Injecting Mappers</title>

  <section id="mappers.main">
    <title>Injecting Mappers</title>
    <para>
      Mybatis-spring lets you inject mappers into your service
      beans. When using mappers you simply call your
      mappers as you have always called your DAOs, but this time you won´t need 
      to code any DAO implementation because MyBatis will do it for you. 
    </para>
    <para>
      With injected mappers your code will have no mybatis-spring dependencies and no MyBatis dependencies either.
    </para>
    <para>
      We have this simple mapper in our application. As you know a mapper is just an interface:
      <programlisting language="java"><![CDATA[
public interface UserMapper {
    User getUser(String userId);
}]]>
      </programlisting>
    </para>
    <para>
      This is the way you set up this mapper with mybatis-spring:
      <programlisting language="xml"><![CDATA[
<bean id="userMapper" class="org.mybatis.spring.MapperFactoryBean">
    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    <property name="mapperInterface" value="sample.UserMapper" />
</bean>]]>
      </programlisting>
      When using mappers you don't need to set up mapper list on the <literal>mybatis-config.xml</literal> file
      because mappers are able to register themselves to MyBatis during startup.
    </para>
    <para>
      Now your mapper is ready to be injected on your service objects:
      <programlisting language="xml"><![CDATA[
<bean id="fooService" class="sample.FooServiceImpl">
    <property name="userMapper" ref="userMapper" />
</bean>]]>
      </programlisting>
    </para>
  </section>
  
  <section id="mappers.scanner">
    <title>Mapper scanning</title>
    <para>
      There is no need to register all your mappers in your <literal>applicationContext.xml</literal>, you
      can use a <literal>MapperScanner</literal> that will search your classpath for your mappers and will set
      them up.        
    </para>
    <para>
      This is the way you set up a <literal>MapperScanner</literal>:
      <programlisting language="xml"><![CDATA[
<bean class="org.mybatis.spring.annotation.MapperScanner">
    <property name="basePackage" value="sample" />
    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>]]>
      </programlisting>
      <literal>basePackage</literal> is an optional property that lets you set the base package were 
      your mappers are. You can set more than one package using ; as a separator. 
      Mappers will be searched in these packages and all their subpackages.
    </para>
    <para>
      Mappers are just interfaces so to let <literal>MapperScanner</literal> identify them they must be annotated with
      <literal>@Mapper</literal> annotation.   
      <programlisting language="java"><![CDATA[
import org.mybatis.spring.annotation.Mapper;
@Mapper("userMapper")
public interface UserMapper {
    User getUser(String userId);
}]]>
      </programlisting>
      <literal>@Mapper</literal> annotation lets you specify a name for your bean. If you don´t provide a name it
      will be registered with its class name.
    </para>
   </section>
  
</chapter>
