<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->
<chapter id="mappers">
  <title>Injecting Mappers</title>

  <para>
    Rather than code data access objects (DAOs) manually using
    <literal>SqlSessionDaoSupport</literal> or
    <literal>SqlSessionTemplate</literal>, Mybatis-Spring provides a proxy
    factory: <literal>MapperFactoryBean</literal>. This class lets you inject
    data mapper interfaces directly into your service beans. When using mappers
    you simply call them as you have always called your DAOs, but you won't
    need to code any DAO implementation because MyBatis-Spring will create a
    proxy for you.
  </para>

  <para>
    With injected mappers your code will have no direct dependencies on
    MyBatis, Spring or MyBatis-Spring. The proxy that
    <literal>MapperFactoryBean</literal> creates handles opening and closing
    the session as well as translating any exceptions into Spring
    <literal>DataAccessException</literal>s. In addition, the proxy will start
    a new Spring transaction if required or participate in an existing one if
    it a transaction is active. 
  </para>

  <section id="mappers.mapperfactorybean">
    <title>MapperFactoryBean</title>
    <para>
      A data mapper is added to Spring like the following:

      <programlisting language="xml"><![CDATA[<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
  <property name="mapperInterface" value="org.mybatis.spring.sample.mapper.UserMapper" />
  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>]]></programlisting>
    </para>

    <para>
      <literal>MapperFactoryBean</literal> creates a proxy class that
      implements <literal>UserMapper</literal> and injects it into the
      application. Because a proxy is created at runtime, the specified Mapper
      <emphasis>must</emphasis> be an interface, not an implementation class.
    </para>

    <para>
      If the UserMapper has a corresponding MyBatis XML mapper file, it will be
      parsed automatically by the <literal>MapperFactoryBean</literal> if the
      XML file is in the same classpath location as the Mapper class. There
      is no need to specify the mapper in a MyBatis configuration file unless
      the mapper XML files are in a different classpath location. See the
      <literal>SqlSessionFactoryBean's</literal> 
      <literal><link linkend="factorybean.configlocation">configLocation</link></literal>
      property for more information.
    </para>

    <para>
      Note that <literal>MapperFactoryBean</literal> requires either an
      <literal>SqlSessionFactory</literal> or an
      <literal>SqlSessionTemplate</literal>. These can be set through the
      respective <literal>sqlSessionFactory</literal> and 
      <literal>sqlSessionTemplate</literal> properties, or they can
      be autowired by Spring. If both properties are set, the 
      <literal>SqlSessionFactory</literal> is ignored. Since the 
      <literal>SqlSessionTemplate</literal> is required to have a session
      factory set, that factory will be used by
      <literal>MapperFactoryBean</literal>.
    </para>

    <para>
       You can inject mappers directly on your business/service objects in the
       same way you inject any other Spring bean:

       <programlisting language="xml"><![CDATA[<bean id="fooService" class="org.mybatis.spring.sample.mapper.FooServiceImpl">
  <property name="userMapper" ref="userMapper" />
</bean>]]></programlisting>

       This bean can be used directly in application logic:

       <programlisting language="java"><![CDATA[public class FooServiceImpl implements FooService {

  private UserMapper userMapper;

  public void setUserMapper(UserMapper userMapper) {
    this.userMapper = userMapper;
  }

  public User doSomeBusinessStuff(String userId) {
    return this.userMapper.getUser(userId);
  }
}]]></programlisting>

       Notice that there are no <literal>SqlSession</literal> or MyBatis
       references in this code. Nor is there any need to create, open or close
       the session, MyBatis-Spring will take care of that. 
     </para>
  </section>

  <section id="mappers.mapperscannerconfigurer">
    <title>MapperScannerConfigurer</title>
    <para>
      There is no need to register all your mappers in the Spring XML file.
      Instead, you can use a <literal>MapperScannerConfigurer</literal> that
      will search the classpath for your mappers and set them up
      automatically as <literal>MapperFactoryBean</literal>s.
    </para>

    <para>
      To set up a <literal>MapperScannerConfigurer</literal> add the
      following to the Spring configuration:
      <programlisting language="xml"><![CDATA[<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
  <property name="basePackage" value="org.mybatis.spring.sample.mapper" />
</bean>]]></programlisting>

      The <literal>basePackage</literal> property lets you set the base package
      for your mapper interface files. You can set more than one package by
      using a semicolon or comma as a separator. Mappers will be searched for
      recursively starting in the specified package(s).
    </para>
    
    <para>
      Notice that there is no need to specify a
      <literal>SqlSessionFactory</literal> or <literal>SqlSessionTemplate</literal>
      because the <literal>MapperScannerConfigurer</literal> will autowire 
      <literal>MapperFactoryBeans</literal>. But, if you are using more than
      one <literal>DataSource</literal> (thus, more than one
      SqlSessionFactory), autowiring will not  work. In this case you can use
      the <literal>sqlSessionFactory</literal> or 
      <literal>sqlSessionTemplate</literal> properties to set the right
      factory / template.
    </para>

    <para>
     <literal>MapperScannerConfigurer</literal> supports filtering the mappers
     created by either specifying a marker interface or an annotation. The
     <literal>annotationClass</literal> property specifies an annotation to
     search for. The <literal>markerInterface</literal> property specifies a
     parent interface to search for. If both properties are specified, mappers
     are added for interfaces that match <emphasis>either</emphasis> criteria.
     By default, these two properties are null, so all interfaces in the given
     base package(s) will be loaded as mappers.
    </para>

    <para>
     Discovered mappers will be named using Spring default naming strategy for
     autodetected components (see section 3.14.4 of the Spring manual). 
     That is, if no annotation is found, it will use the uncapitalized non-qualified class 
     name of the mapper. But if either a @Component or a JSR-330 @Named annotation is 
     found it will get the name from the annotation.
     Notice that you can set the <literal>annotationClass</literal> property
     to <literal>org.springframework.stereotype.Component</literal>,  
     <literal>javax.inject.Named</literal> (if you have JSE 6) or to your own annotation
     (that must be itself annotated) so the annotation will work both as a marker 
     and as a name provider.
    </para>
   </section>
</chapter>
