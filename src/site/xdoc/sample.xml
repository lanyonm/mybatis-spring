<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2010-2011 The myBatis Team

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
  version: $Id$
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  
  <properties>
    <title>MyBatis Spring | Sample Code</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
  </properties>

  <body>
    <section name="Sample Code">
      <p>
        You can check out sample code from the MyBatis repository on Google Code.
      </p>
      <ul>
        <li><a href="http://mybatis.googlecode.com/svn/sub-projects/mybatis-spring/trunk/src/test/java/org/mybatis/spring/sample/">Java code</a></li>
        <li><a href="http://mybatis.googlecode.com/svn/sub-projects/mybatis-spring/trunk/src/test/resources/org/mybatis/spring/sample/">Config files</a></li>
      </ul>
      <p>
        Any of the samples can be run with JUnit 4. The sample code shows a typical design where a transactional service gets
        domain objects from a data access layer. <code>FooService.java</code> acts as the service:
        <source><![CDATA[@Transactional
public class FooService {

    private UserDao userDao;

    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }

    public User doSomeBusinessStuff(String userId) {
        return this.userDao.getUser(userId);
    }
}]]></source>
        It is a transactional bean, so a transaction is started when any of its methods is called
        and committed when the method ends without throwing an unchecked exception.
        Notice that transactional behaviour is configured with the <code>@Transactional</code>
        attribute. This is not required; any other way provided by Spring can be used to demarcate
        your transactions.
      </p>
      <p>
        This service calls a data access layer built with MyBatis. This layer
        consists on a DAO composed by an interface <code>UserDao.java</code>
        that will be used both with a dynamic proxy built by MyBatis at runtime or
        with a java class <code>UserMapperImpl.java</code>.
        This DAO is injected into the service by Spring.
      </p>
      <p>
        The database access layer has been implemented using some of the
        different techniques explained in this manual.
      </p>
      <table>
        <caption>Sample test classes</caption>
        <thead>
          <tr>
            <th>Sample test</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>
              <code>SampleMapperTest</code>
            </td>
            <td>
              Shows you the recommended configuration
              based on a <code>MapperFactoryBean</code> that will
              dynamically build an implementation for <code>UserDao</code>
            </td>
          </tr>
          <tr>
            <td>
              <code>SampleScannerTest</code>
            </td>
            <td>
              Shows how to use the <code>MapperScannerConfigurer</code>
            </td>
          </tr>
          <tr>
            <td>
              <code>SampleSqlSessionTest</code>
            </td>
            <td>
              Shows how to hand code a DAO using a Spring managed
              <code>SqlSession</code> and providing your own
              implementation <code>UserDaoImpl.java</code>.
            </td>
          </tr>
          <tr>
            <td>
              <code>SampleBatchTest</code>
            </td>
            <td>
              Shows how to use a batch <code>SqlSession</code>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Please take a look at the different <code>applicationContext.xml</code>
        files to see MyBatis-Spring in action.
      </p>
    </section>
  </body>
</document>
